// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MembiOS
import Combine
import FPhiSelphIDWidgetiOS
import Foundation
import Lottie
import Network
import Swift
import UIKit
import _Concurrency
import os.log
import os
extension Foundation.Bundle {
  public static var membSdkBundle: Foundation.Bundle {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TokenizeUseCase {
  final public func execute<T>(data: T) -> Combine.AnyPublisher<Swift.String, Swift.Error> where T : Swift.Encodable
  @objc deinit
}
extension MembiOS.R {
  public enum Image : Swift.String {
    case imageNotFound
    case logo
    case close
    case closeDark
    case arrowDown
    case foreignCard
    case passport
    case idCard
    case flag
    case failureBackground
    case closeBig
    case globe
    case diagnosisPermissionDenied
    case diagnosisNetwork
    case diagnosisDefault
    case diagnosisTimeout
    case dotGray
    case dotGreen
    case acceptedDni3
    case acceptedDni4
    case acceptedNie
    case acceptedPassport
    case dniBack
    case dniFront
    case dniFace
    case pagerArrow
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension MembiOS.R {
  public enum Font : Swift.String, Swift.CaseIterable {
    case bold
    case regular
    public init?(rawValue: Swift.String)
    public typealias AllCases = [MembiOS.R.Font]
    public typealias RawValue = Swift.String
    public static var allCases: [MembiOS.R.Font] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
}
@_hasMissingDesignatedInitializers final public class SendNFCUseCase {
  final public func execute(startDate: Swift.Int64, endDate: Swift.Int64, data: MembiOS.NfcData) -> Combine.AnyPublisher<Swift.Bool?, Swift.Error>
  @objc deinit
}
public struct SelfiTrackingResponse : Swift.Decodable {
  public var succeeded: Swift.Bool
  public var alive: Swift.Bool
  public var match: Swift.Bool
  public var enrolled: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class SendMRZUseCase {
  final public func execute(startDate: Swift.Int64, endDate: Swift.Int64, data: Swift.String) -> Combine.AnyPublisher<Swift.Bool?, Swift.Error>
  @objc deinit
}
public class MembSdkManager {
  final public let useCaseProvider: MembiOS.UseCaseProvider!
  public init(navigationController: UIKit.UINavigationController, completion: MembiOS.MembSDKCompletion? = nil)
  public func launchSDK(membSdkRequest: MembiOS.MembSdkRequest)
  public func cancelOnboarding()
  @objc deinit
}
public struct OnboardingResponse {
}
public typealias MembSDKCompletion = (MembiOS.MembSdkResponse) -> Swift.Void
@objc @_hasMissingDesignatedInitializers final public class SelphIDMockWidgetBiometryService : ObjectiveC.NSObject {
  final public func callService()
  @objc deinit
}
public struct TransactionTokenResponse : Swift.Decodable {
  public var token: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public enum R {
}
@_hasMissingDesignatedInitializers public class ThemeManager {
  public static func setup(theme: MembiOS.ThemeProtocol)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class StyleHelper {
  public struct TextAttributes {
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SendSelfiUseCase {
  final public func execute(startDate: Swift.Int64, endDate: Swift.Int64, data: Swift.String) -> Combine.AnyPublisher<MembiOS.SelfiTrackingResponse?, Swift.Error>
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TransactionTokenUseCase {
  final public func execute(transactionId: Swift.String, callbackUrl: Swift.String, documentType: Swift.String) -> Combine.AnyPublisher<MembiOS.TransactionTokenResponse, Swift.Error>
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SelphIDWidgetBiometryService : ObjectiveC.NSObject {
  final public func callService()
  @objc deinit
}
extension MembiOS.SelphIDWidgetBiometryService : FPhiSelphIDWidgetiOS.FPhiSelphIDWidgetProtocol {
  @objc final public func captureFinished()
  @objc final public func captureCancelled()
  @objc final public func captureTimeout()
  @objc final public func captureFailed(_ error: Swift.Error!)
  @objc final public func onEvent(_ time: Foundation.Date!, type: Swift.String!, info: Swift.String!)
}
public typealias Completion = () -> Swift.Void
public struct NfcData : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MembSdkRequest {
  public var token: Swift.String
  public var documentType: MembiOS.DocumentType?
  public init(token: Swift.String, documentType: MembiOS.DocumentType?)
}
public class ThemeAena {
  public init()
  @objc deinit
}
extension MembiOS.ThemeAena : MembiOS.ThemeProtocol {
  public var name: Swift.String {
    get
  }
  public var fonts: [MembiOS.R.Font : Swift.String] {
    get
  }
  public var dimensions: [MembiOS.R.Dimension : CoreGraphics.CGFloat] {
    get
  }
  public var styles: [MembiOS.R.Style : MembiOS.StyleHelper.TextAttributes] {
    get
  }
  public var images: [MembiOS.R.Image : UIKit.UIImage?] {
    get
  }
  public var colors: [MembiOS.R.Color : UIKit.UIColor?] {
    get
  }
}
public enum ResultCode : Swift.Int {
  case CANCEL
  case SUCCESS
  case ERROR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct MembSdkResponse {
  public var resultCode: MembiOS.ResultCode
  public var documentType: MembiOS.DocumentType
  public var documentIssuer: Swift.String
  public var documentNumber: Swift.String
}
public struct TransactionDto : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension MembiOS.R {
  public enum Style {
    case roundedButton
    case secondaryRoundedButton
    case roundedLabel
    case linkButton
    case barButton
    case title1
    case title2
    case title2White
    case title25
    case title25White
    case title3
    case title4
    case title5
    case regularBig
    case regular
    case regularTerciary
    case regularSmall
    case regularSmallPlus
    case regularSmallWhite
    case roundedView
    case roundedViewSecondary
    public static func == (a: MembiOS.R.Style, b: MembiOS.R.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct UseCaseProvider {
  public let tokenizeUseCase: MembiOS.TokenizeUseCase
  public let sendSelfiUseCase: MembiOS.SendSelfiUseCase
  public let sendNFCUseCase: MembiOS.SendNFCUseCase
  public let sendMRZUseCase: MembiOS.SendMRZUseCase
  public let transactionTokenUseCase: MembiOS.TransactionTokenUseCase
}
public enum DocumentType : Swift.UInt, Swift.CaseIterable {
  case ID_CARD
  case PASSPORT
  case FOREIGN_CARD
  public init?(rawValue: Swift.UInt)
  public typealias AllCases = [MembiOS.DocumentType]
  public typealias RawValue = Swift.UInt
  public static var allCases: [MembiOS.DocumentType] {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
}
extension MembiOS.DocumentType {
  public func toString() -> Swift.String
}
public struct SelphiResponse {
  public var image: UIKit.UIImage?
  public var template: Foundation.Data
}
extension MembiOS.R {
  public enum Color : Swift.String {
    case colorMembMain
    case colorMembMainBackground
    case colorMembMainCardBackground
    case colorMembTitleText
    case colorMembToolbar
    case colorMembErrorText
    case colorMembErrorImage
    case colorMembErrorBackground
    case colorMembButtonText
    case colorMembBodyText
    case colorMembSuccessMessage
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public protocol ThemeProtocol {
  var name: Swift.String { get }
  var fonts: [MembiOS.R.Font : Swift.String] { get }
  var dimensions: [MembiOS.R.Dimension : CoreGraphics.CGFloat] { get }
  var styles: [MembiOS.R.Style : MembiOS.StyleHelper.TextAttributes] { get }
  var images: [MembiOS.R.Image : UIKit.UIImage?] { get }
  var colors: [MembiOS.R.Color : UIKit.UIColor?] { get }
}
@_hasMissingDesignatedInitializers public class NFCRemoteService {
  @objc deinit
}
extension MembiOS.R {
  public enum Dimension : CoreGraphics.CGFloat {
    case fontVerySmall
    case fontSmall
    case fontSmallPlus
    case fontRegular
    case fontRegularBig
    case fontQuasyBig
    case fontBig
    case fontBigPlus
    case fontBigPlusPlus
    case fontVeryBig
    case defaultBorder
    case defaulControlSize
    case cornerRadius
    case cornerRadiusBig
    public init?(rawValue: CoreGraphics.CGFloat)
    public typealias RawValue = CoreGraphics.CGFloat
    public var rawValue: CoreGraphics.CGFloat {
      get
    }
  }
}
public protocol TransactionTokenServiceProtocol {
  func getTransactionToken(transactionId: Swift.String, callbackUrl: Swift.String, documentType: Swift.String) -> Combine.AnyPublisher<MembiOS.TransactionTokenResponse, Swift.Error>
}
extension MembiOS.R.Image : Swift.Equatable {}
extension MembiOS.R.Image : Swift.Hashable {}
extension MembiOS.R.Image : Swift.RawRepresentable {}
extension MembiOS.R.Font : Swift.Equatable {}
extension MembiOS.R.Font : Swift.Hashable {}
extension MembiOS.R.Font : Swift.RawRepresentable {}
extension MembiOS.DocumentType : Swift.Equatable {}
extension MembiOS.DocumentType : Swift.Hashable {}
extension MembiOS.DocumentType : Swift.RawRepresentable {}
extension MembiOS.ResultCode : Swift.Equatable {}
extension MembiOS.ResultCode : Swift.Hashable {}
extension MembiOS.ResultCode : Swift.RawRepresentable {}
extension MembiOS.R.Style : Swift.Equatable {}
extension MembiOS.R.Style : Swift.Hashable {}
extension MembiOS.R.Color : Swift.Equatable {}
extension MembiOS.R.Color : Swift.Hashable {}
extension MembiOS.R.Color : Swift.RawRepresentable {}
extension MembiOS.R.Dimension : Swift.Equatable {}
extension MembiOS.R.Dimension : Swift.Hashable {}
extension MembiOS.R.Dimension : Swift.RawRepresentable {}
